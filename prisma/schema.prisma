// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  items         Item[]
  trainingData  TrainingData[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id          String   @id @default(cuid())
  name        String
  confidence  Float
  imageData   String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  feedback    Feedback?
}

model Feedback {
  id          String   @id @default(cuid())
  itemId      String   @unique
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  isCorrect   Boolean
  correctName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TrainingData {
  id          String   @id @default(cuid())
  itemName    String   // Correct item name
  imageData   String   // Base64 encoded image data
  bboxX       Float    // Bounding box X coordinate
  bboxY       Float    // Bounding box Y coordinate
  bboxWidth   Float    // Bounding box width
  bboxHeight  Float    // Bounding box height
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  isVerified  Boolean  @default(false)
  confidence  Float    // Original detection confidence
  detectedAs  String   // What the model originally detected it as
}
