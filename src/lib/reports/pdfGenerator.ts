import { Item } from '@prisma/client'
import PDFDocument from 'pdfkit'

interface GeneratePDFParams {
  title: string
  items: Item[]
  user: {
    name: string
    email: string
  }
}

export async function generatePDF({ title, items, user }: GeneratePDFParams): Promise<string> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument()
      const chunks: Buffer[] = []

      // Collect PDF data chunks
      doc.on('data', chunk => chunks.push(chunk))
      doc.on('end', () => {
        const pdfBuffer = Buffer.concat(chunks)
        const pdfBase64 = pdfBuffer.toString('base64')
        resolve(`data:application/pdf;base64,${pdfBase64}`)
      })

      // Add title
      doc
        .font('Helvetica-Bold')
        .fontSize(24)
        .text(title, { align: 'center' })
        .moveDown()

      // Add report info
      doc
        .font('Helvetica')
        .fontSize(12)
        .text(`Generated for: ${user.name}`)
        .text(`Email: ${user.email}`)
        .text(`Date: ${new Date().toLocaleDateString()}`)
        .moveDown()

      // Add summary
      const totalValue = items.reduce((sum, item) => sum + item.estimatedValue, 0)
      doc
        .font('Helvetica-Bold')
        .fontSize(14)
        .text('Summary', { underline: true })
        .moveDown(0.5)
        .font('Helvetica')
        .fontSize(12)
        .text(`Total Items: ${items.length}`)
        .text(`Total Estimated Value: $${totalValue.toFixed(2)}`)
        .moveDown()

      // Add items table
      doc
        .font('Helvetica-Bold')
        .fontSize(14)
        .text('Inventory Items', { underline: true })
        .moveDown(0.5)

      // Table headers
      const tableTop = doc.y
      const itemNumberX = 50
      const nameX = 100
      const categoryX = 250
      const valueX = 400
      const conditionX = 475

      doc
        .font('Helvetica-Bold')
        .fontSize(12)
        .text('#', itemNumberX, tableTop)
        .text('Item', nameX, tableTop)
        .text('Category', categoryX, tableTop)
        .text('Value', valueX, tableTop)
        .text('Condition', conditionX, tableTop)
        .moveDown()

      // Table rows
      let currentY = doc.y
      items.forEach((item, index) => {
        // Add new page if needed
        if (currentY > 700) {
          doc.addPage()
          currentY = 50
        }

        doc
          .font('Helvetica')
          .fontSize(10)
          .text((index + 1).toString(), itemNumberX, currentY)
          .text(item.name, nameX, currentY)
          .text(item.category, categoryX, currentY)
          .text(`$${item.estimatedValue.toFixed(2)}`, valueX, currentY)
          .text(item.condition, conditionX, currentY)

        currentY = doc.y + 15
      })

      // Add footer
      doc
        .fontSize(10)
        .text(
          'This report was generated by HomeScan Insurance Estimator',
          50,
          doc.page.height - 50,
          { align: 'center' }
        )

      // Finalize PDF
      doc.end()
    } catch (error) {
      reject(error)
    }
  })
} 